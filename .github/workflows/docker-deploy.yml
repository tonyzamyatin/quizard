name: Build and Deploy Quizard Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.repository_owner }}
  DOCKER_PASSWORD: ${{ secrets.PERSONAL_ACCESS_TOKEN_GITHUB }}  # Use personal access token for GHCR

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Preset Image Names
        run: |
          echo "IMAGE_API_URL=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/quizard:backend-api-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo "IMAGE_WORKER_URL=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/quizard:backend-worker-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo "IMAGE_FRONTEND_URL=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/quizard:frontend-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Build and push API Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.IMAGE_API_URL }}

      - name: Build and push Worker Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.IMAGE_WORKER_URL }}

      - name: Build and push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.IMAGE_FRONTEND_URL }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Copy Docker Compose files to server using SCP
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml docker-compose.prod.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/

      - name: Deploy to Production Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ~  # Move to home directory where docker-compose files are located
            export IMAGE_API_URL=${{ env.IMAGE_API_URL }}
            export IMAGE_WORKER_URL=${{ env.IMAGE_WORKER_URL }}
            export IMAGE_FRONTEND_URL=${{ env.IMAGE_FRONTEND_URL }}
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml down --remove-orphans  # Stop existing containers
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull  # Pull the latest images
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d  # Bring up the new containers
          EOF