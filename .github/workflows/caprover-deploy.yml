name: Build and Deploy Quizard Backend API and Worker

on:
  push:
    branches:
      - main
      - dev
    workflow_dispatch:

jobs:
  build-and-deploy-api:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Preset Image Name for API
        run: echo "IMAGE_API_URL=docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/quizard:backend-api-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Build and push API Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.IMAGE_API_URL }}

      - name: Deploy API Image to CapRover via API
        run: |
          # Debugging - log server URL and secrets
          echo "Deploying to CapRover server: ${{ secrets.CAPROVER_SERVER_URL }}"
          
          # Get auth token from CapRover login
          response=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -d '{"password":"${{ secrets.CAPROVER_API_PASSWORD }}"}' \
              ${{ secrets.CAPROVER_SERVER_URL }}/api/v2/login)
          
          # Log the response for debugging
          echo "Login response: $response"
          
          # Try to parse token, and log any parsing errors
          auth_token=$(echo $response | jq -r '.token')
          
          if [ "$auth_token" = "null" ] || [ -z "$auth_token" ]; then
            echo "Error: Failed to retrieve auth token."
            exit 1
          fi
          
          # Now use the auth token to deploy the image
          curl -X POST \
            -H "X-Captain-Auth: $auth_token" \
            -H "x-namespace: captain" \
            -H "Content-Type: application/json" \
            -d '{
                  "captainDefinitionContent": "{\"schemaVersion\":2,\"imageName\":\"docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/quizard:backend-api-$(echo ${{ github.sha }} | cut -c1-7)\"}",
                  "gitHash": ""
                }' \
            ${{ secrets.CAPROVER_SERVER_URL }}/api/v2/user/apps/appData/${{ secrets.CAPROVER_API_APP_NAME }}
  build-and-deploy-worker:
    runs-on: ubuntu-latest
    needs: build-and-deploy-api

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Preset Image Name for Worker
        run: echo "IMAGE_WORKER_URL=docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/quizard:backend-worker-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Build and push Worker Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.IMAGE_WORKER_URL }}

      - name: Deploy Worker Image to CapRover via API
        run: |
          auth_token=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -d '{"password":"${{ secrets.CAPROVER_API_PASSWORD }}"}' \
              ${{ secrets.CAPROVER_SERVER }}/api/v2/login | jq -r '.token')

          curl -X POST \
            -H "X-Captain-Auth: $auth_token" \
            -H "x-namespace: captain" \
            -H "Content-Type: application/json" \
            -d '{
                  "captainDefinitionContent": "{\"schemaVersion\":2,\"imageName\":\"docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/quizard:backend-worker-$(echo ${{ github.sha }} | cut -c1-7)\"}",
                  "gitHash": ""
                }' \
            ${{ secrets.CAPROVER_SERVER_URL }}/api/v2/user/apps/appData/${{ secrets.CAPROVER_WORKER_APP_NAME }}

  build-and-deploy-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build Frontend
        run: npm run build --verbose
        working-directory: ./frontend

      - name: Preset Image Name for Frontend
        run: echo "IMAGE_FRONTEND_URL=docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/quizard:frontend-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Build and push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend  
          file: ./frontend/Dockerfile  
          push: true
          tags: ${{ env.IMAGE_FRONTEND_URL }}

      - name: Deploy Frontend Image to CapRover via API
        run: |
          auth_token=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -d '{"password":"${{ secrets.CAPROVER_API_PASSWORD }}"}' \
              ${{ secrets.CAPROVER_SERVER_URL }}/api/v2/login | jq -r '.token')

          curl -X POST \
            -H "X-Captain-Auth: $auth_token" \
            -H "x-namespace: captain" \
            -H "Content-Type: application/json" \
            -d '{
                  "captainDefinitionContent": "{\"schemaVersion\":2,\"imageName\":\"docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/quizard:frontend-$(echo ${{ github.sha }} | cut -c1-7)\"}",
                  "gitHash": ""
                }' \
            ${{ secrets.CAPROVER_SERVER_URL }}/api/v2/user/apps/appData/${{ secrets.CAPROVER_FRONTEND_APP_NAME }}

